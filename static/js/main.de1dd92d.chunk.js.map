{"version":3,"sources":["utilities.js","AddThoughtForm.js","Thought.js","purpleBack.webp","App.js","reportWebVitals.js","index.js"],"names":["getNewExpirationTime","Date","now","nextId","generateId","result","AddThoughtForm","props","useState","text","setText","className","onSubmit","event","preventDefault","length","thought","id","expiresAt","addThought","type","aria-label","placeholder","value","onChange","target","Thought","removeThought","useEffect","timeRemaining","timerId","setTimeout","clearTimeout","onClick","App","thoughts","setThoughts","thoughtIdToRemove","filter","src","purpleBack","alt","prev","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAAO,SAASA,IACZ,OAAOC,KAAKC,MAAQ,KAGxB,IAAIC,EAAS,EACN,SAASC,IACZ,IAAMC,EAASF,EAEf,OADAA,GAAU,EACHE,E,WCLJ,SAASC,EAAeC,GAAQ,IAAD,EACVC,mBAAS,IADC,mBAC3BC,EAD2B,KACrBC,EADqB,KAqBlC,OACI,uBAAMC,UAAU,iBAAiBC,SAdhB,SAACC,GAElB,GADAA,EAAMC,iBACFL,EAAKM,OAAS,EAAG,CACjB,IAAMC,EAAU,CACZC,GAAIb,IACJK,KAAMA,EACNS,UAAWlB,KAEfO,EAAMY,WAAWH,GAErBN,EAAQ,KAIR,UACI,uBACIU,KAAK,OACLC,aAAW,uBACXC,YAAY,uBACZC,MAAOd,EACPe,SAzBa,SAAC,GAAgB,IAC9BD,EAD6B,EAAbE,OAChBF,MACRb,EAAQa,MAyBJ,uBAAOH,KAAK,SAASG,MAAM,WC/BhC,SAASG,EAAQnB,GAAQ,IACpBS,EAA2BT,EAA3BS,QAASW,EAAkBpB,EAAlBoB,cAEjBC,qBAAU,WACN,IAAMC,EAAgBb,EAAQE,UAAYjB,KAAKC,MACzC4B,EAAUC,YAAW,WACvBJ,EAAcX,EAAQC,MACvBY,GACH,OAAO,WACHG,aAAaF,MAElB,CAACd,IAMJ,OACI,qBAAIL,UAAU,UAAd,UACI,wBACIU,aAAW,iBACXV,UAAU,gBACVsB,QATc,WACtBN,EAAcX,EAAQC,KAKlB,kBAOA,qBAAKN,UAAU,OAAf,SAAuBK,EAAQP,UC5B5B,UAA0B,wCCwD1ByB,MAlDf,WAAgB,IAAD,EACmB1B,mBAAS,CACvC,CACES,GAAIb,IACJK,KAAM,6CACNS,UAAWlB,KAEb,CACEiB,GAAIb,IACJK,KAAM,uCACNS,UAAWlB,OAVF,mBACNmC,EADM,KACIC,EADJ,KAkBPT,EAAgB,SAACU,GACrBD,GAAY,SAACD,GAAD,OACVA,EAASG,QAAO,SAAAtB,GAAO,OAAIA,EAAQC,KAAOoB,SAG9C,OACE,sBAAK1B,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,SACE,qBACEA,UAAU,UACV4B,IAAKC,EACLC,IAAI,OAGR,iCACE,oDAEF,iCACE,cAACnC,EAAD,CACEa,WAvBW,SAACH,GAClBoB,GAAY,SAACM,GAAD,OAAW1B,GAAX,mBAAuB0B,UAwB/B,oBAAI/B,UAAU,WAAd,SACGwB,EAASQ,KAAI,SAAC3B,GAAD,OACZ,cAACU,EAAD,CAA0BV,QAASA,EAASW,cAAeA,GAA7CX,EAAQC,gBCnCnB2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.de1dd92d.chunk.js","sourcesContent":["export function getNewExpirationTime() {\r\n    return Date.now() + 15 * 1000;\r\n}\r\n\r\nlet nextId = 0;\r\nexport function generateId() {\r\n    const result = nextId;\r\n    nextId += 1;\r\n    return result;\r\n}","import React, { useState } from 'react';\r\nimport { generateId, getNewExpirationTime } from './utilities';\r\n\r\nexport function AddThoughtForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleTextChange = ({ target }) => {\r\n        const { value } = target;\r\n        setText(value);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (text.length > 0) {\r\n            const thought = {\r\n                id: generateId(),\r\n                text: text,\r\n                expiresAt: getNewExpirationTime()\r\n            }\r\n            props.addThought(thought);\r\n        }\r\n        setText(\"\");\r\n    }\r\n\r\n    return (\r\n        <form className=\"AddThoughtForm\" onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                aria-label=\"What's on your mind?\"\r\n                placeholder=\"What's on your mind?\"\r\n                value={text}\r\n                onChange={handleTextChange}\r\n            />\r\n            <input type=\"submit\" value=\"Add\" />\r\n        </form>\r\n    );\r\n}","import React, { useEffect } from 'react';\r\n\r\nexport function Thought(props) {\r\n    const { thought, removeThought } = props;\r\n\r\n    useEffect(() => {\r\n        const timeRemaining = thought.expiresAt - Date.now();\r\n        const timerId = setTimeout(() => {\r\n            removeThought(thought.id);\r\n        }, timeRemaining);\r\n        return () => {\r\n            clearTimeout(timerId);\r\n        };\r\n    }, [thought]);\r\n\r\n    const handleRemoveClick = () => {\r\n        removeThought(thought.id);\r\n    };\r\n\r\n    return (\r\n        <li className=\"Thought\">\r\n            <button\r\n                aria-label=\"Remove thought\"\r\n                className=\"remove-button\"\r\n                onClick={handleRemoveClick}\r\n            >\r\n                &times;\r\n      </button>\r\n            <div className=\"text\">{thought.text}</div>\r\n        </li>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/purpleBack.3ef2a3e7.webp\";","import React, { useState } from 'react';\nimport { AddThoughtForm } from './AddThoughtForm';\nimport { Thought } from './Thought';\nimport { generateId, getNewExpirationTime } from './utilities';\nimport purpleBack from './purpleBack.webp'\n\nfunction App() {\n  const [thoughts, setThoughts] = useState([\n    {\n      id: generateId(),\n      text: 'This is a place for your passing thoughts.',\n      expiresAt: getNewExpirationTime(),\n    },\n    {\n      id: generateId(),\n      text: \"They'll be removed after 15 seconds.\",\n      expiresAt: getNewExpirationTime(),\n    },\n  ]);\n\n  const addThought = (thought) => {\n    setThoughts((prev) => [thought, ...prev])\n  }\n\n  const removeThought = (thoughtIdToRemove) => {\n    setThoughts((thoughts) =>\n      thoughts.filter(thought => thought.id !== thoughtIdToRemove))\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"demo-wrap\">\n        <img\n          className=\"demo-bg\"\n          src={purpleBack}\n          alt=\"\"\n        />\n      </div>\n      <header>\n        <h1>Passing Thoughts</h1>\n      </header>\n      <main>\n        <AddThoughtForm\n          addThought={addThought}\n        />\n        <ul className=\"thoughts\">\n          {thoughts.map((thought) => (\n            <Thought key={thought.id} thought={thought} removeThought={removeThought} />\n          ))}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}